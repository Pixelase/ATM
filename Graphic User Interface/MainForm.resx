<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQED/AAAAAAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAABIAACMuAAAjLgAAAAAAAAAA
        AAAAAAAAgICAAG5ubwBYV1kARURHADc2OQAoJisAJiQoABcVGgBVVFYAa2tsAH19fQB5eXkAXV1eAEFA
        QwAsKi4AGRccACooLAB2dXYAS0pNAHNzcwBxcHEAREJFACEfJAAfHSIAe3p7AFFQUgAhHyMATk1PAGZm
        ZwAwLzIAU1FTAD49QAB3d3cAeHh4ADUzNgAwLjIANzU4ADIwNAAvLjIAPz1AADw6PgBSUVQATUxPAGdm
        ZwBiYWIAenp7AC4sMABIR0oAbGxsAB4cIQAbGR4AQT9DAHBwcQAjISYAIB4jAHV0dQBXVlcAKykuAEA+
        QgA6ODwAGhgdAD07PwA5ODwALy0yACclKgAdGyAAra2uAP///wD29vYAQUBEACsqLgDw8PAA29vcAKCg
        ogD7+/sAi4qMAD08QABlZWYALSswAOzs7ACMi44AamlsALW0tgB2dXgA19fYAP7+/gCUk5YA397fAD8+
        QQDCwsMAV1VZAJGQkwCdnZ4A6urrAObm5gC+vr8ASUdLAP39/QDm5ucA+fn5AM7NzgCXlpkAenl8AImI
        igDl5eUAv7/AAOjo6QAmJCkAenl7AL++wAAlIygAhoWIAGJhZADY19gA5+fnAJiXmQBVU1cAqqqsAPj4
        +ACXlpgAx8fIAN/f4AAkIicAk5KVAFtaXQDo6OgAcG5yAM7NzwB5eHoA+vr6AJqanABPTVEA/Pz8AKam
        qABHRUkAt7e4AENCRgCenZ8AgoKEAFRTVwAcGh8A09PUAOvr7AAvLTEA1dTVAG1sbwBubXAAycnKANHQ
        0QAbGh4Ac3J1AKGgogBTUVUAm5qcAFlXWwCzs7QAcXBzAH18fwDFxMYA0tLSABgWGwDQ0NEAsrGzAL28
        vgDu7u4Ap6eoAKmoqgAiICUA4uHiANnZ2gDR0dIAXVxfAIB/gQAtKy8AYWBjAK6trwCwsLEAVlVZADw7
        PgCioqMAm5udAIaFhwDk5OUAiIeJAPHx8QBQT1EAJiUpAOLi4gBfXWEAw8LEAGJiYwBpaGsAmJiaAGZl
        aADBwMIANjQ4APf39wCTkpQAtbW2AF1bXwD4+PkAzczOAGNhZQBTUlQAOjg7AFxbXgAgHyMATEpOADAv
        MwA1MzcAOTc7AEA/QwBWVFgARUNHACUjJwAzMjYANzU5AHNycwBCQUQAaWhqAGhnaABmZWYAdXV2ACgm
        KgBdW10AWllbAENCRQA0MzcAXFxeABwaHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAgICAgICAgICAgIAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgICAgICAgIAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgI
        CAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAAAAAAAAAAAAAAAAAAAAAAAAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAAAAAAAAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAAAAAAAAAAAAAAAAAAA
        AAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAA
        AAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAAAAAAA
        AAAAAAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        AAAAAAAAAAAAAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgAAAAAAAAAAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgIAAAAAAAAAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgAAAAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgIAAAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAACAgIPXXIyM7PCAgICAgICAjQyMjI0QgI
        CNLIyMjTCAgICAgICNTIyNU9CAjWyMjI1wgI2MjIyKgICAgIAAAAAAgICAjHREREyAgICAgICAgvUERE
        yYkICAhnREREaAgICAgICAhKRER+FwgQykRERMsICFRERERNCAgICAAAAAAICAgIwERERMEICAgICAgI
        wkRERMOhCAgIZ0RERGgICAgICAgISkREfhcIxMVERETGCAhURERETQgICAgAAAAICAgICLu8RESRQggI
        CAgICJhERERUCAgICGdERERoCAgICAgICEpERH4XCL1EREREvggIVERERE0ICAgICAgACAgICAgItERE
        YrW2tra2tra3RERQTwgICAhnREREaAgICAgICAhKRER+Fwi4RERkRLkvCFRERERNCAgICAgIAAgICAgI
        CK9EREREREREREREREREsAgICAgIZ0RERGgICAgICAgISkREfhcIsURFsUREsghURERETQgICAgICAAI
        CAgICAhvqURERERERERERERERJIICAgICGdERERoCAgICAgICEpERH4XM6pEq6xERK0IVERERE0ICAgI
        CAgACAgICAgICHhERESio6OjpGJERKVACAgICAhnREREaAgICAgICAhKRER+F0aCRKYPpUSnCFRERERN
        CAgICAgIAAgICAgICAgTS0REVwgICJtEREScCAgICAgIZ0RERGgICAgICAgISkREfhedRESeCJ9EoKFU
        RERETQgICAgICAAICAgICAgIPZRERJWWCAh8RERElwgICAgICGdERERoCAgICAgICEpERH4XmEREmQia
        REU/VERERE0ICAgICAgACAgICAgICAiLRESFjAiNjkREj5AICAgICAhnREREaAgICAgICAhKRER+bJFE
        fmwIkkREk1RERERNCAgICAgIAAgICAgICAgIRoJERIMIhIVERIYICAgICAgIZ0RERGgICAgICAgISkRE
        fodLRIgICIliRIpURERETQgICAgICAAICAgICAgICBB5RER6e3xERGJ9CAgICAgICGdERERoCAgICAgI
        CEpERH5/RERwCAgYSUSAgURERE0ICAgICAgACAgICAgICAgIcERERHFyRERyMggICAgICAhnREREaAgI
        CAgICAhKRERzdERWdQgICHZEd3hERERNCAgICAgIAAgICAgICAgICARkRERlYkREZggICAgICAgIZ0RE
        RGgICAgICAgISkREaWpEa2wICAhtRERuRERETQgICAgICAAICAgICAgICAgQWkREREREVlsICD0+Ozs7
        O1xERERdOzs7Oz8ICEpERF5fRGAICAgIYWJEY0RERE0ICAgICAgACAgICAgICAgICFRERERERFUbCAhH
        SERERERERERERERERERJCAhKRERWVkRXCAgICBhYRFZERERNCAgICAgIAAAICAgICAgICAhPUERERERR
        CAgIR0hERERERERERERERERESQgISkREREREUggICAgIU0RERERETQgICAgAAAAACAgICAgICAgICENE
        RERFRggICEdIREREREREREREREREREkICEpERERESzsICAgICExERERERE0ICAgIAAAAAAgICAgICAgI
        CAg6Ozs7PAgICAg9Pjs7Ozs7Ozs7Ozs7Ozs/CAhAOzs7Oz49CAgICAhBOzs7OztCCAgICAAAAAAACAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAA
        AAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgA
        AAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgIAAAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgIAAAAAAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAAAAAAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAAAAAAAAAAAAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAAAAAAAAAAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAAAAAACAgICAgICAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAAAAAAAAAAAAAAAAAAAAAACAgICAgICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgI
        CAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgICAgICAgICAgICAgICAgICAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgICAgICAgICAgICAgAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///4AB////////gAH///////gAAB//////4AAAB/////+AAAAB
        /////gAAAAB////8AAAAAD////gAAAAAH///4AAAAAAH///AAAAAAAP//4AAAAAAAf//AAAAAAAA//8A
        AAAAAAD//gAAAAAAAH/8AAAAAAAAP/wAAAAAAAAf+AAAAAAAAB/wAAAAAAAAD/AAAAAAAAAP4AAAAAAA
        AAfgAAAAAAAAB8AAAAAAAAADwAAAAAAAAAPAAAAAAAAAA8AAAAAAAAADgAAAAAAAAACAAAAAAAAAAIAA
        AAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAA
        AACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAMAAAAAAAAADwAAAAAAAAAPAAAAAAAAAA+AA
        AAAAAAAD4AAAAAAAAAfgAAAAAAAAB/AAAAAAAAAP8AAAAAAAAA/4AAAAAAAAH/wAAAAAAAA//AAAAAAA
        AD/+AAAAAAAAf/8AAAAAAAD//wAAAAAAAP//wAAAAAAD///gAAAAAAf///AAAAAAB///+AAAAAAf///8
        AAAAAD////8AAAAA/////4AAAAH/////4AAAB//////8AAA///////+AAf//////////////
</value>
  </data>
</root>